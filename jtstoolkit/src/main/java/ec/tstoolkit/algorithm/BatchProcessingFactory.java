/*
* Copyright 2013 National Bank of Belgium
*
* Licensed under the EUPL, Version 1.1 or â€“ as soon they will be approved 
* by the European Commission - subsequent versions of the EUPL (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://ec.europa.eu/idabc/eupl
*
* Unless required by applicable law or agreed to in writing, software 
* distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and 
* limitations under the Licence.
*/

package ec.tstoolkit.algorithm;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author Jean Palate
 */
public class BatchProcessingFactory {

    public static enum LinkType {

        /**
         * Input of the complete processing
         */
        Input, 
        /**
         * Specific output, part of the final result, generated by a previous step.
         * The object is an element of the final composite result.
         */
        Output, 
        /**
         * Item of some part of the final result, accessed by its full name through the
         * generic "getData" method. 
         */
        Result
    }

    public static class Node<S extends IProcSpecification> {

        public Node(String name, S specification, LinkType linkType, String linkId) {
            this.name = name;
            this.specification = specification;
            this.linkType = linkType;
            this.linkId = linkId;
         }
        public final String name;
        public final S specification;
        public final LinkType linkType;
        public final String linkId;
     }
    
    private ArrayList<Node<? extends IProcSpecification>> nodes_ =
            new ArrayList<>();

    public <S extends IProcSpecification, D> void add(Node<S> node) {
        nodes_.add(node);
    }
    
    public List<Node<? extends IProcSpecification>> nodes(){
        return Collections.unmodifiableList(nodes_);
    }

    public BatchProcessing createProcessing(ProcessingContext context) {
        BatchProcessing proc = new BatchProcessing();
        for (Node<? extends IProcSpecification> node : nodes_) {
            BatchProcessing.ILink link;
            switch (node.linkType) {
                case Input:
                    link = new BatchProcessing.InputLink(node.linkId, Object.class);
                    break;
                case Output:
                    link = new BatchProcessing.OutputLink(node.linkId, Object.class);
                    break;
                default:
                    link = new BatchProcessing.Link(node.linkId, Object.class);
                    break;
            }
            IProcessing processing=ProcessingManager.getInstance().createProcessor(node.specification, context);
            proc.add(new BatchProcessing.Node(node.name, link, processing));
        }
        return proc;
    }
}
